<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="9" total="28" passed="19">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="5159" started-at="2018-12-15T08:08:16Z" finished-at="2018-12-15T08:08:21Z">
    <groups>
    </groups>
    <test name="lemon api auto testng" duration-ms="5159" started-at="2018-12-15T08:08:16Z" finished-at="2018-12-15T08:08:21Z">
      <class name="com.lemon.api.auto.testCase.AllTestCase">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="beforeSuite" is-config="true" duration-ms="8" started-at="2018-12-15T16:08:16Z" finished-at="2018-12-15T16:08:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="2595" started-at="2018-12-15T16:08:16Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":"123456","regname":"aabbcc"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"注册成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(*) as totalNum from member where mobilephone='13999999999'","expectedResultList":[{"totalNum":"0"}]}]]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(*) as totalNum from member where mobilephone='13999999999'","expectedResultList":[{"totalNum":"1"}]},{"no":"2","sql":"select LeaveAmount,Type from member where mobilephone='13999999999'","expectedResultList":[{"LeaveAmount":"0.00","Type":"1"}]}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":1,"code":"10001","data":null,"msg":"注册成功"}] but found [{"status":0,"code":"20110","data":null,"msg":"手机号码已被注册"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":1,"code":"10001","data":null,"msg":"注册成功"}] but found [{"status":0,"code":"20110","data":null,"msg":"手机号码已被注册"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="115" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":"123456","regname":"柠檬班"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20110","data":null,"msg":"手机号码已被注册"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(*) as totalNum from member where mobilephone='13999999999'","expectedResultList":[{"totalNum":"1"}]}]]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="29" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":"","regname":"柠檬班"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20103","data":null,"msg":"密码不能为空"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="23" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"","pwd":"","regname":"柠檬班"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20103","data":null,"msg":"手机号不能为空"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="26" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"135","pwd":"123456","regname":"柠檬班"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20109","data":null,"msg":"手机号码格式不正确"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="22" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":"123","regname":"柠檬班"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20108","data":null,"msg":"密码长度必须为6~18"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="32" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":"123456"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"登录成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="26" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":""}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20103","data":null,"msg":"密码不能为空"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="32" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"","pwd":"123456"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20103",data:null,"msg":"手机号不能为空"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":0,"code":"20103",data:null,"msg":"手机号不能为空"}] but found [{"status":0,"code":"20103","data":null,"msg":"手机号不能为空"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":0,"code":"20103",data:null,"msg":"手机号不能为空"}] but found [{"status":0,"code":"20103","data":null,"msg":"手机号不能为空"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="35" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13517315569","pwd":"123456"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20111",data:null,"msg":"用户名或密码错误"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":0,"code":"20111",data:null,"msg":"用户名或密码错误"}] but found [{"status":0,"code":"20111","data":null,"msg":"用户名或密码错误"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":0,"code":"20111",data:null,"msg":"用户名或密码错误"}] but found [{"status":0,"code":"20111","data":null,"msg":"用户名或密码错误"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="42" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","pwd":"1234567"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20111",data:null,"msg":"用户名或密码错误"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":0,"code":"20111",data:null,"msg":"用户名或密码错误"}] but found [{"status":0,"code":"20111","data":null,"msg":"用户名或密码错误"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":0,"code":"20111",data:null,"msg":"用户名或密码错误"}] but found [{"status":0,"code":"20111","data":null,"msg":"用户名或密码错误"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="29" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13888880002","amount":"100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20104","data":null,"msg":"此手机号对应的会员不存在"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="28" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"-100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20117","data":null,"msg":"请输入范围在0到50万之间的正数金额"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="270" started-at="2018-12-15T16:08:19Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[14]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":{"id":80,"regname":"tom","pwd":"E10ADC3949BA59ABBE56E057F20F883E","mobilephone":"13999999999","leaveamount":"10000.00","type":"1","regtime":"2018-04-26 14:42:36.0"},"msg":"充值成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[[{"no":"1","sql":"select LeaveAmount from member where MobilePhone='13999999999'","expectedResult":[{"LeaveAmount":"0.00"}]}]]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select LeaveAmount from member where MobilePhone='13999999999'","expectedResult":[{"LeaveAmount":"10000.00"}]}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":1,"code":"10001","data":{"id":80,"regname":"tom","pwd":"E10ADC3949BA59ABBE56E057F20F883E","mobilephone":"13999999999","leaveamount":"10000.00","type":"1","regtime":"2018-04-26 14:42:36.0"},"msg":"充值成功"}] but found [{"status":1,"code":"10001","data":{"id":1,"regname":"aabbcc","pwd":"E10ADC3949BA59ABBE56E057F20F883E","mobilephone":"13999999999","leaveamount":"-800.00","type":"1","regtime":"2018-12-11 22:55:41.0"},"msg":"充值成功"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":1,"code":"10001","data":{"id":80,"regname":"tom","pwd":"E10ADC3949BA59ABBE56E057F20F883E","mobilephone":"13999999999","leaveamount":"10000.00","type":"1","regtime":"2018-04-26 14:42:36.0"},"msg":"充值成功"}] but found [{"status":1,"code":"10001","data":{"id":1,"regname":"aabbcc","pwd":"E10ADC3949BA59ABBE56E057F20F883E","mobilephone":"13999999999","leaveamount":"-800.00","type":"1","regtime":"2018-12-11 22:55:41.0"},"msg":"充值成功"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="23" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"138888","amount":"100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20109","data":null,"msg":"手机号码格式不正确"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="33" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"abc"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20118","data":null,"msg":"请输入数字"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="27" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[17]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"-100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20117","data":null,"msg":"请输入范围在0到50万之间的正数金额"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="25" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"1388888000","amount":"100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20109","data":null,"msg":"手机号码格式不正确"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="26" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"10000"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":0,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}] but found [{"status":1,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":0,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}] but found [{"status":1,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="34" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"0"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"20117","data":null,"msg":"请输入范围在0到50万之间的正数金额"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":0,"code":"20117","data":null,"msg":"请输入范围在0到50万之间的正数金额"}] but found [{"status":1,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":0,"code":"20117","data":null,"msg":"请输入范围在0到50万之间的正数金额"}] but found [{"status":1,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="26" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[21]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"mobilephone":"13999999999","amount":"100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"提现成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":1,"code":"10001","data":null,"msg":"提现成功"}] but found [{"status":1,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":1,"code":"10001","data":null,"msg":"提现成功"}] but found [{"status":1,"code":"20119","data":null,"msg":"余额不足，请修改提现额度"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="38" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[22]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"memberId":"1","title":"测试新增项目","loanRate":"12","loanTerm":"3","loanDateType":"2","repaymemtWay":"11","biddingDays":"5","amount":"100000"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"加标成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="114" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[23]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"id":"1","status":"4"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"更新状态成功：竞标开始，当前标为竞标中状态"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select `Status` from loan where Id=1","expectedResult":[{"Status":"4"}]}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="225" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[24]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"memberId":"1","password":"123456","loanId":"1","amount":"100"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"竞标成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select MemberID,LoanId,Amount,IsValid from invest order by id desc limit 1","expectedResult":[{"MemberID":"1","LoanId":"1","Amount":"100.00","IsValid":"1"}]},{"no":"2","sql":"select LeaveAmount from member where MobilePhone='13999999999'","expectedResult":[{"LeaveAmount":"9900.00"}]}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="152" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[25]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"memberId":"1","password":"123456","loanId":"10000","amount":"100000"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":0,"code":"11009","data":null,"msg":"不存在该标的"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(1) as loanNum from loan where id=10000","expectedResult":[{"loanNum":"0"}]}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="114" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[26]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"id":"1"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"20405","data":null,"msg":"该项目不在核保审批或终审状态，无法生成回款计划！"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(1) as loanNum from loan where id=1 and `Status`=5","expectedResult":[{"loanNum":"0"}]}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="128" started-at="2018-12-15T16:08:20Z" data-provider="datas" finished-at="2018-12-15T16:08:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[27]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"id":"1","status":"5"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":null,"msg":"更新状态成功：当前标为核保审批状态"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select `Status` from loan where Id=1","expectedResult":[{"Status":"5"}]}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="FAIL" signature="f(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="f" duration-ms="305" started-at="2018-12-15T16:08:21Z" data-provider="datas" finished-at="2018-12-15T16:08:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[28]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[{"id":"1"}]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[{"status":1,"code":"10001","data":[{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2018-05-27 12:24:01","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2018-06-27 12:24:01","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2018-07-27 12:24:01","actualRepaymentDate":null,"status":"0"}],"msg":"生成回款计划成功"}]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(1) as totalNum from repayment where InvestId=1","expectedResult":[{"totalNum":"0"}]}]]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[[{"no":"1","sql":"select count(1) as totalNum from repayment where InvestId=1","expectedResult":[{"totalNum":"3"}]},{"no":"2","sql":"select Terms,UnfinishedInterest,UnfinishedPrincipal,`Status` from repayment where InvestId=1","expectedResult":[{"Terms":"1","UnfinishedInterest":"1.00","UnfinishedPrincipal":"0.00","Status":"0"},{"Terms":"2","UnfinishedInterest":"1.00","UnfinishedPrincipal":"0.00","Status":"0"},{"Terms":"3","UnfinishedInterest":"1.00","UnfinishedPrincipal":"100.00","Status":"0"}]}]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [{"status":1,"code":"10001","data":[{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2018-05-27 12:24:01","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2018-06-27 12:24:01","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2018-07-27 12:24:01","actualRepaymentDate":null,"status":"0"}],"msg":"生成回款计划成功"}] but found [{"status":1,"code":"10001","data":[{"id":null,"investId":"16","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"16","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"16","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"15","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"15","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"15","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"14","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"14","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"14","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"13","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"13","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"13","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"12","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"12","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"12","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"11","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"11","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"11","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"10","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"10","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"10","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"9","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"9","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"9","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"8","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"8","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"8","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"7","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"7","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"7","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"6","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"6","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"6","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"5","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"5","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"5","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"4","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"4","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"4","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"3","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"3","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"3","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"2","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"2","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"2","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"}],"msg":"生成回款计划成功"}]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [{"status":1,"code":"10001","data":[{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2018-05-27 12:24:01","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2018-06-27 12:24:01","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-04-27 12:24:01","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2018-07-27 12:24:01","actualRepaymentDate":null,"status":"0"}],"msg":"生成回款计划成功"}] but found [{"status":1,"code":"10001","data":[{"id":null,"investId":"16","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"16","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"16","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"15","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"15","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"15","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"14","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"14","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"14","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"13","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"13","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"13","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"12","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"12","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"12","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"11","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"11","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"11","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"10","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"10","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"10","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"9","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"9","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"9","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"8","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"8","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"8","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"7","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"7","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"7","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"6","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"6","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"6","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"5","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"5","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"5","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"4","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"4","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"4","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"3","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"3","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"3","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"2","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"2","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"2","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-12-15 16:08:21","terms":"1","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-01-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-12-15 16:08:21","terms":"2","unfinishedInterest":"1.0","unfinishedPrincipal":"0","repaymentDate":"2019-02-15 16:08:21","actualRepaymentDate":null,"status":"0"},{"id":null,"investId":"1","createTime":"2018-12-15 16:08:21","terms":"3","unfinishedInterest":"1.0","unfinishedPrincipal":"100.00","repaymentDate":"2019-03-15 16:08:21","actualRepaymentDate":null,"status":"0"}],"msg":"生成回款计划成功"}]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertEquals(Assert.java:123)
	at org.testng.Assert.assertEquals(Assert.java:176)
	at org.testng.Assert.assertEquals(Assert.java:186)
	at com.lemon.api.auto.testCase.AllTestCase.f(AllTestCase.java:125)
	at sun.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:348)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:343)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:305)
	at org.testng.SuiteRunner.run(SuiteRunner.java:254)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1224)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1149)
	at org.testng.TestNG.run(TestNG.java:1057)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method status="PASS" signature="afterSuit()[pri:0, instance:com.lemon.api.auto.testCase.AllTestCase@2cb4c3ab]" name="afterSuit" is-config="true" duration-ms="161" started-at="2018-12-15T16:08:21Z" finished-at="2018-12-15T16:08:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuit -->
      </class> <!-- com.lemon.api.auto.testCase.AllTestCase -->
    </test> <!-- lemon api auto testng -->
  </suite> <!-- Suite -->
</testng-results>
